(load "./test/stdlib.scm")

(define (addOne x) (+ x 1))

(define (zero f) (lambda (x) x))
(define (one f) (lambda (x) (f x)))
(define (two f) (lambda (x) (f (f x))))
(define (three f) (lambda (x) (((successor two) f) x)))
(define (successor n) (lambda (f) (lambda (x) (f ((n f) x)))))
(define (plus m) (lambda (n) (lambda (f) (lambda (x) ((m f) ((n f) x))))))
(define (double n) ((plus n) n))
(define (multiply m) (lambda (n) (lambda (f) (lambda (x) ((m (n f)) x)))))
(define (exp m) (lambda (n) (n m)))
(define (predecessor n)
  (lambda (f)
    (lambda (x)
      (((n (lambda (g) (lambda (h) (h (g f))))) (lambda (u) x)) (lambda (u) u)))))
(define (minus m) (lambda (n) ((n predecessor) m)))

(list ((one addOne) 41)
(((successor zero) addOne) 0)
(((successor one) addOne) 0)
((((plus two) two) addOne) 0)
((three addOne) 0)
(((double three) addOne) 0)
((((multiply three) three) addOne) 0)
((((exp two) three) addOne) 0)
(((predecessor three) addOne) 0)
((((minus three) two) addOne) 0))
